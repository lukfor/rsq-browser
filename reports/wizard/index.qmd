---
format:
  html:
    pagetitle: "Rsq Browser"
    body-classes: "bg-light"
    page-layout: custom
    embed-resources: true
    toc: false
    title-block-style	: none
    title-block-banner: false
    date-format: "D MMMM YYYY"
    include-before-body: "template/navbar.view.html"
    include-after-body: "template/footer.view.html"
    include-in-header:
      - file: template/header.html
params:
  snps:
  - rs123456
  - rs7891011
  rare_variant_analysis: yes
  genotyped: yes
  chip: IO
  genes:
  - BRCA1
  - TP53
  genes_coordinates: 
  - chr17:43044295-43170245
  - chr17:7661779-7687538
  upload_permission: no
  population: eur
  population_file: data_local/mlof.bi.snv.tab.gz
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

### load libraries
library(Rsamtools)
library(data.table)
library(tidyr)
library(dplyr)
library(ggplot2)
library(plotly)
library(DT) ### TODO: add to conda environment!

```


```{r load_data, include = FALSE}

######## FUNCTIONS #########

### define function to get gene-level statistics for each combination of genotyping array and reference panel
get_gene_statistics <- function(pivoted_df, gene_name) {
  
  ## get unique combinations of genotyping array and reference panel
  array_ref_ids <- unique(pivoted_df$identifier)
  
  ## instantiate empty dataframe where results will be collected
  stats <- data.frame()
  
  ## iterate over all unique combinations of genotyping array and reference panel
  for (i in 1:length(array_ref_ids)) {
    
    ## get array name from identifier
    array_name <- strsplit(array_ref_ids[i], split="_", fixed = T)[[1]][1]
    
    ## get reference panel name from identifier 
    ref_panel_name <- strsplit(array_ref_ids[i], split="_", fixed = T)[[1]][2]
    
    ## get only data concerning a specific combination of genotyping array and reference panel
    ref_data_subset <- pivoted_df %>%
      filter(identifier == array_ref_ids[i])
    
    ## remove rows with NA (e.g. SNP not measured by this specific combination)
    ref_data_subset <- na.omit(ref_data_subset)
    
    ## get nr. of variants
    nr_var <- nrow(ref_data_subset)
    
    ## get proportion of high quality (r2 >= 0.8) variants
    prop_hq_var <- round(nrow(ref_data_subset[ref_data_subset$r2 >= 0.8, ])/nr_var,3)
    
    ### collect information for one specific combi in a dataframe
    gene <- gene_name
    stats_temp <- as.data.frame(gene)
    stats_temp$array <- array_name
    stats_temp$ref_panel <-ref_panel_name
    stats_temp$nr_variants <- nr_var
    stats_temp$prop_hq_variants <- prop_hq_var
    
    ## Collect data in one dataframe
    stats <- rbind(stats, stats_temp)
  }
  
  return(stats)
  
}




###### MAIN ########

tabix_file <- params$population_file
tabix_file <- "//wsl.localhost/Ubuntu-22.04/home/flo/projects/rsq-browser/local_files/data_local/mlof.bi.snv.tab.gz"


# Create a TabixFile object
tbx <- TabixFile(tabix_file)

### extract colnames from file (since users have to specify population -> always only one input population_file)
col_names <- names(fread(tabix_file, nrows = 0))


# instantiate empty dataframe where statistics will be collected per gene per array and per reference panel
gene_stats_all <- data.frame()

for (i in 1:length(params$genes_coordinates)) {
  
  ## get gene name
  gene <- params$genes[i]
  
  ## get gene coordinates as CHR/START/STOP from gene_coordinates input parameter
  chr_temp <- strsplit(params$genes_coordinates[i], split=":", fixed = T)[[1]][1]
  coord_temp <- strsplit(params$genes_coordinates[i], split=":", fixed = T)[[1]][2]
  start_pos_temp <- as.integer(strsplit(coord_temp, split="-", fixed = T)[[1]][1])
  stop_pos_temp <- as.integer(strsplit(coord_temp, split="-", fixed = T)[[1]][2])
  
  ## Define genomnic regions of interest
  region_temp <- GRanges(seqnames = chr_temp, ranges = IRanges(start = start_pos_temp, end = stop_pos_temp))
  
  ## Extract data from the specified regions
  result_temp <- scanTabix(tbx, param = region_temp)
  
  ## Parse the extracted lines into a data frame
  lines <- unlist(result_temp)
  data_temp <- fread(text = lines, header = F, sep = "\t")
  colnames(data_temp) <- col_names
  
  ## modify data
  data_temp <- data_temp %>%
    ### remove superfluous columns
    select(-CHR, -POS, -REF, -ALT, -AF, -ends_with("_in")) %>%
    ### tidy up, get better format for plotting
    pivot_longer(cols = everything(), names_to = "identifier", values_to = "r2")
  
  
  ### for each gene (e.g. each set of gene coordinates) get useful statistics
  gene_stats_temp <- get_gene_statistics(data_temp, gene)
  
  ## Collect data in one dataframe
  gene_stats_all <- rbind(gene_stats_all, gene_stats_temp)
}

### remove temporary objects, which are no longer required (lines + objects whose names end with "temp")
rm(list = grep("temp$", ls(), value=T))
rm(lines)

```

## Average Imputation quality by MAF

```{r show_table, echo=FALSE}
datatable(gene_stats_all)

```


```{r old_code, include=FALSE}

# ### create MAF column for binning
# data$MAF <- ifelse(data$AF <= 0.5, data$AF, 1-data$AF)
# 
# ### create bin column with bin information
# data <- data %>%
#   mutate(bin = cut(MAF, breaks = c(0.0000, 0.0005, 0.001, 0.002, 0.005, 0.010, 0.015,
#                                     0.020, 0.035, 0.050, 0.100, 0.200, 0.300, 0.400, 0.500),
#                    labels = c(0.0005, 0.001, 0.002, 0.005, 0.01, 0.015, 0.02,
#                               0.035, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5)))
# 
# data_plot <- data %>%
#   ### remove superfluous columns
#   select(-CHR, -POS, -REF, -ALT, -AF, -MAF, -ends_with("_in")) %>%
#   ### tidy up, get into better format for plotting
#   pivot_longer(!bin, names_to = "chip_identifier", values_to = "chip_r2") %>%
#   ### change bin variable to numeric for line plot
#   mutate(bin = as.numeric(as.character(bin))) %>%
#   ### remove rows with missing values (there is only one value column and if this is NA then the row is not informative)
#   na.omit()
# 
# ### calculate mean for each bin and each unique combination of array and reference panel
# data_plot <- data_plot %>%
#   group_by(bin, chip_identifier) %>%
#   summarize(mean_r2 = mean(chip_r2))
# 
# 
# ### chips
# ## HC - Core
# ## OE - OmniExpress
# ## IO - (Infinium)Omni2.5
# ## MG - MEGA
# 
# ### ref panels
# ## 1kg - 1000 Genomes
# ## hrc - HRC
# ## top - TOPMed
# 
# ### combinations: 4 chips x 3 ref_panels x 14 bins = 168 data points for the plot
# 
# lineplot <- ggplot(data_plot, aes(x=bin, y=mean_r2, color = chip_identifier)) +
#   ### draw line plot
#   geom_line()+
#   ### highlight actual data points
#   geom_point(shape=0)+
#   ## use log-scale on x-axis and display x-axis labels without trailing zeros
#   scale_x_log10(labels = function(x) as.character(x))+
#   ## manually set y-axis ticks and set limits of the y-axis (include whole range from 0 to 1)
#   scale_y_continuous(breaks = c(0, 0.2, 0.4, 0.6, 0.8, 1), limits = c(0,1))+
#   xlab("Minor Allele Frequency (MAF)")+
#   ylab("Average Imputation Quality")+
#   theme_minimal()
# 
# ### convert to plotly object
# lineplot_plotly <- ggplotly(lineplot)
# 
# 
# ##### Open questions for this plot #######
# 
# ### how to add interactivity -> reference panel, genotyping array + download?
# ### how to include variant number (required?)
# ### how to map correct label (e.g. Core (1000 Genomes) [xxx variants])


#lineplot_plotly
```

